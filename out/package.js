class Vector {
    constructor(size) {
        this.vals = new Array(size);
    }
    add(v) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] += v.vals[i];
        }
        return this;
    }
    sub(v) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] += v.vals[i];
        }
        return this;
    }
    scale(s) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] *= s;
        }
        return this;
    }
    rot(t) {
        var cost = Math.cos(t);
        var sint = Math.sin(t);
        var x = this.x * cost - this.y * sint;
        var y = this.x * sint + this.y * cost;
        this.x = x;
        this.y = y;
        return this;
    }
    round() {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] = Math.round(this.vals[i]);
        }
        return this;
    }
    length() {
        var sum = 0;
        for (var i = 0; i < this.vals.length; i++) {
            sum += Math.pow(this.vals[i], 2);
        }
        return Math.sqrt(sum);
    }
    normalize() {
        return this.scale(1 / this.length());
    }
    to(v) {
        return v.c().sub(this);
    }
    lerp(v, weight) {
        return this.c().add(this.to(v).scale(weight));
    }
    c() {
        return new Vector(this.vals.length).overwrite(this);
    }
    overwrite(v) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] = v.vals[i];
        }
        return this;
    }
    dot(v) {
        var sum = 0;
        for (var i = 0; i < this.vals.length; i++) {
            sum += this.vals[i] * v.vals[i];
        }
        return sum;
    }
    loop() {
    }
    incr() {
    }
    project(v) {
        return v.c().scale(this.dot(v) / v.dot(v));
    }
    get(i) {
        return this.vals[i];
    }
    set(i, val) {
        this.vals[i] = val;
    }
    get x() {
        return this.vals[0];
    }
    get y() {
        return this.vals[1];
    }
    get z() {
        return this.vals[2];
    }
    set x(val) {
        this.vals[0] = val;
    }
    set y(val) {
        this.vals[1] = val;
    }
    set z(val) {
        this.vals[2] = val;
    }
}
class Vector2 extends Vector {
    constructor(x, y) {
        super(2);
        this.x = x;
        this.y = y;
    }
}
class Vector3 extends Vector {
    constructor(x, y, z) {
        super(3);
        this.x = x;
        this.y = y;
        this.z = z;
    }
    cross(v) {
        var x = this.y * v.z - this.z * v.y;
        var y = this.z * v.x - this.x * v.z;
        var z = this.x * v.y - this.y * v.x;
        return new Vector3(x, y, z);
    }
    rotX(t) {
    }
    rotY(t) {
    }
    rotZ(t) {
    }
}
/// <reference path="vector.ts" />
var Color;
(function (Color) {
    Color[Color["green"] = 0] = "green";
    Color[Color["blue"] = 1] = "blue";
    Color[Color["orange"] = 2] = "orange";
    Color[Color["red"] = 3] = "red";
    Color[Color["white"] = 4] = "white";
    Color[Color["yellow"] = 5] = "yellow";
})(Color || (Color = {}));
var Side;
(function (Side) {
    Side[Side["F"] = 0] = "F";
    Side[Side["B"] = 1] = "B";
    Side[Side["L"] = 2] = "L";
    Side[Side["R"] = 3] = "R";
    Side[Side["U"] = 4] = "U";
    Side[Side["D"] = 5] = "D";
})(Side || (Side = {}));
var Edge;
(function (Edge) {
    Edge[Edge["top"] = 0] = "top";
    Edge[Edge["right"] = 1] = "right";
    Edge[Edge["bot"] = 2] = "bot";
    Edge[Edge["left"] = 3] = "left";
})(Edge || (Edge = {}));
var edgeIndicesMap = new Map();
edgeIndicesMap.set(Edge.top, [new Vector2(2, 0), new Vector2(1, 0), new Vector2(0, 0),]);
edgeIndicesMap.set(Edge.right, [new Vector2(2, 2), new Vector2(2, 1), new Vector2(2, 0),]);
edgeIndicesMap.set(Edge.bot, [new Vector2(0, 2), new Vector2(1, 2), new Vector2(2, 2),]);
edgeIndicesMap.set(Edge.left, [new Vector2(0, 0), new Vector2(0, 1), new Vector2(0, 2),]);
var side2NormalMap = new Map();
side2NormalMap.set(Side.F, new Vector3(0, 0, -1));
side2NormalMap.set(Side.B, new Vector3(0, 0, 1));
side2NormalMap.set(Side.L, new Vector3(-1, 0, 0));
side2NormalMap.set(Side.R, new Vector3(1, 0, 0));
side2NormalMap.set(Side.U, new Vector3(0, 1, 0));
side2NormalMap.set(Side.D, new Vector3(0, -1, 0));
class Action {
    constructor(side, reverse) {
        this.side = side;
        this.counterClockWise = reverse;
    }
}
class Cube {
    constructor() {
        this.vals = new Array(6);
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] = [
                [i, i, i],
                [i, i, i],
                [i, i, i],
            ];
        }
    }
    solve() {
    }
    scramble(n) {
        this.executeActions(this.generateRandomActions(n));
    }
    rotateCap(side, counterclockwise) {
        this.rotateCapTop(side, counterclockwise);
        this.rotateCapSides(side, counterclockwise);
    }
    F(counterclockwise) {
        this.rotateCap(Side.F, counterclockwise);
    }
    B(counterclockwise) {
        this.rotateCap(Side.B, counterclockwise);
    }
    L(counterclockwise) {
        this.rotateCap(Side.L, counterclockwise);
    }
    R(counterclockwise) {
        this.rotateCap(Side.R, counterclockwise);
    }
    U(counterclockwise) {
        this.rotateCap(Side.U, counterclockwise);
    }
    D(counterclockwise) {
        this.rotateCap(Side.D, counterclockwise);
    }
    generateRandomActions(n) {
        var sides = [Side.F, Side.B, Side.L, Side.R, Side.U, Side.D];
        var actions = [];
        for (var i = 0; i < n; i++) {
            var side = Math.floor(Math.random() * 6);
            var reversed = Math.random() > 0.5;
            actions.push(new Action(sides[side], reversed));
        }
        return actions;
    }
    executeActions(actions) {
        for (var action of actions) {
            this.rotateCap(action.side, action.counterClockWise);
        }
    }
    rotateCapTop(side, reversed) {
        var cap = this.vals[side];
        var rot = reversed ? Math.PI / 2 : -Math.PI / 2;
        var vecs = [
            new Vector2(-1, 1),
            new Vector2(0, 1),
            new Vector2(1, 1),
            new Vector2(1, 0),
            new Vector2(1, -1),
            new Vector2(0, -1),
            new Vector2(-1, -1),
            new Vector2(-1, 0),
        ];
        var vec1 = new Vector2(1, 1);
        for (var v of vecs) {
            v.rot(-rot).round();
            v.y = -v.y;
            v.add(vec1); //negative rotation because need to look back
        }
        var newFront = [
            [getxy(cap, vecs[0]), getxy(cap, vecs[1]), getxy(cap, vecs[2]),],
            [getxy(cap, vecs[7]), cap[1][1], getxy(cap, vecs[3]),],
            [getxy(cap, vecs[6]), getxy(cap, vecs[5]), getxy(cap, vecs[4]),],
        ];
        this.vals[side] = newFront;
    }
    rotateCapSides(side, counterclockwise) {
        if (counterclockwise) {
            this.rotateCapSides(side, false);
            this.rotateCapSides(side, false);
            this.rotateCapSides(side, false);
        }
        else {
            switch (side) {
                // enum Color { green, blue, orange, red, white, yellow }
                // enum Side { F, B, L, R, U, D }
                case Side.F: {
                    this.rotateSides(this.vals, Side.U, Edge.bot, Side.R, Edge.left, Side.D, Edge.top, Side.L, Edge.right);
                    break;
                }
                case Side.B: {
                    this.rotateSides(this.vals, Side.U, Edge.top, Side.L, Edge.left, Side.D, Edge.bot, Side.R, Edge.right);
                    break;
                }
                case Side.L: {
                    this.rotateSides(this.vals, Side.U, Edge.left, Side.F, Edge.left, Side.D, Edge.left, Side.B, Edge.right);
                    break;
                }
                case Side.R: {
                    this.rotateSides(this.vals, Side.U, Edge.right, Side.B, Edge.left, Side.D, Edge.right, Side.F, Edge.right);
                    break;
                }
                case Side.U: {
                    this.rotateSides(this.vals, Side.B, Edge.top, Side.R, Edge.top, Side.F, Edge.top, Side.L, Edge.top);
                    break;
                }
                case Side.D: {
                    this.rotateSides(this.vals, Side.F, Edge.bot, Side.R, Edge.bot, Side.B, Edge.bot, Side.L, Edge.bot);
                    break;
                }
            }
        }
    }
    // enum Side{F,B,L,R,U,D}
    // enum Edge{top,right,bot,left}
    rotateSides(cube, top, topsideEdge, right, rightsideEdge, bot, botside, left, leftside) {
        //move top to copy of right
        var newright = this.srcEdgeToCopyEdge(this.vals[top], topsideEdge, this.vals[right], rightsideEdge);
        //move right to copy of bot
        var newbot = this.srcEdgeToCopyEdge(this.vals[right], rightsideEdge, this.vals[bot], botside);
        //move bot to copy of left
        var newleft = this.srcEdgeToCopyEdge(this.vals[bot], botside, this.vals[left], leftside);
        //move left to copy of top
        var newtop = this.srcEdgeToCopyEdge(this.vals[left], leftside, this.vals[top], topsideEdge);
        //replace originals with the copys
        this.vals[top] = newtop;
        this.vals[right] = newright;
        this.vals[bot] = newbot;
        this.vals[left] = newleft;
    }
    srcEdgeToCopyEdge(src, srcEdge, dstToCopy, dstEdge) {
        var copy = copy2Darray(dstToCopy);
        var srcIndices = edgeIndicesMap.get(srcEdge);
        var dstIndices = edgeIndicesMap.get(dstEdge);
        for (var i = 0; i < srcIndices.length; i++) {
            setxy(copy, dstIndices[i], getxy(src, srcIndices[i]));
        }
        return copy;
    }
    rotateSidesUsingMath(side, counterclockwise) {
        var normal = side2NormalMap.get(side);
        var top;
    }
    getColorFromNormal(normal, offset) {
        return null;
    }
    setColorFromNormal(normal, offset, color) {
    }
    draw(ctxt) {
        var locs = [
            new Vector2(150, 150),
            new Vector2(450, 150),
            new Vector2(0, 150),
            new Vector2(300, 150),
            new Vector2(150, 0),
            new Vector2(150, 300),
        ];
        for (var i = 0; i < 6; i++) {
            this.drawSide(ctxt, locs[i], i);
        }
    }
    drawSide(ctxt, v, side) {
        var size = 50;
        for (var x = 0; x < 3; x++) {
            for (var y = 0; y < 3; y++) {
                ctxt.fillStyle = Color[this.vals[side][y][x]];
                ctxt.fillRect(x * size + v.x, y * size + v.y, size, size);
            }
        }
    }
}
function getxy(arr, v) {
    return arr[v.y][v.x];
}
function setxy(arr, v, val) {
    arr[v.y][v.x] = val;
}
function multiswap(src, dst, a0, a1, a2, b0, b1, b2) {
    swap(src, dst, a0, b0);
    swap(src, dst, a1, b1);
    swap(src, dst, a2, b2);
}
function swap(a, b, av, bv) {
    var temp = getxy(a, av);
    a[av.y][av.x] = getxy(b, bv);
    b[bv.y][bv.x] = temp;
}
function copy2Darray(array) {
    var copy = new Array(array.length);
    for (var y = 0; y < array.length; y++) {
        copy[y] = new Array(array[y].length);
        for (var x = 0; x < array[y].length; x++) {
            copy[y][x] = array[y][x];
        }
    }
    return copy;
}
function map(val1, start1, stop1, start2, stop2) {
    return start2 + (stop2 - start2) * ((val1 - start1) / (stop1 - start1));
}
function inRange(min, max, value) {
    if (min > max) {
        var temp = min;
        min = max;
        max = temp;
    }
    return value <= max && value >= min;
}
function min(a, b) {
    if (a < b)
        return a;
    return b;
}
function max(a, b) {
    if (a > b)
        return a;
    return b;
}
function clamp(val, min, max) {
    return this.max(this.min(val, max), min);
}
function rangeContain(a1, a2, b1, b2) {
    return max(a1, a2) >= max(b1, b2) && min(a1, a2) <= max(b1, b2);
}
function create2dArray(v, fill) {
    var rows = new Array(v.x);
    for (var i = 0; i < v.x; i++) {
        rows[i] = new Array(v.y);
        for (var j = 0; j < v.y; j++) {
            rows[i][j] = fill;
        }
    }
    return rows;
}
function getMousePos(canvas, evt) {
    var rect = canvas.getBoundingClientRect();
    return new Vector2(evt.clientX - rect.left, evt.clientY - rect.top);
}
function createCanvas(x, y) {
    var canvas = document.createElement('canvas');
    canvas.width = x;
    canvas.height = y;
    document.body.appendChild(canvas);
    var ctxt = canvas.getContext('2d');
    return { ctxt: ctxt, canvas: canvas };
}
function random(min, max) {
    return Math.random() * (max - min) + min;
}
function randomSpread(center, spread) {
    var half = spread / 2;
    return random(center - half, center + half);
}
var lastUpdate = Date.now();
function loop(callback) {
    var now = Date.now();
    callback(now - lastUpdate);
    lastUpdate = now;
    requestAnimationFrame(() => {
        loop(callback);
    });
}
function mod(number, modulus) {
    return ((number % modulus) + modulus) % modulus;
}
function* iter(n) {
    var i = 0;
    while (i < n)
        yield i++;
}
var keys = {};
document.addEventListener('keydown', (e) => {
    keys[e.keyCode] = true;
});
document.addEventListener('keyup', (e) => {
    keys[e.keyCode] = false;
});
function getMoveInput() {
    var dir = new Vector2(0, 0);
    if (keys[37] || keys[65])
        dir.x--; //left
    if (keys[38] || keys[87])
        dir.y++; //up
    if (keys[39] || keys[68])
        dir.x++; //right
    if (keys[40] || keys[83])
        dir.y--; //down
    return dir;
}
function getFiles(strings) {
    var promises = [];
    for (var string of strings) {
        var promise = fetch(string)
            .then(resp => resp.text())
            .then(text => text);
        promises.push(promise);
    }
    return Promise.all(promises);
}
class Button {
    constructor(element, html, classes, callback) {
        this.callback = callback;
        this.btnElement = string2html(`<button class="${classes}">${html}</button>`);
        element.appendChild(this.btnElement);
        this.btnElement.addEventListener('click', () => {
            this.callback();
        });
    }
}
function string2html(string) {
    var div = document.createElement('div');
    div.innerHTML = string;
    return div.children[0];
}
/// <reference path="cube.ts" />
/// <reference path="utils.ts" />
/// <reference path="buttons.ts" />
var canctx = createCanvas(600, 450);
var canvas = canctx.canvas;
var ctxt = canctx.ctxt;
canvas.style.backgroundColor = 'grey';
var canvaselement = document.querySelector('#canvas');
var buttonselement = document.querySelector('#buttons');
var buttonsReelement = document.querySelector('#buttonsRe');
var specialselement = document.querySelector('#specials');
canvaselement.appendChild(canvas);
var cube = new Cube();
cube.draw(ctxt);
new Button(specialselement, 'scramble', '', () => {
    cube.scramble(50);
    cube.draw(ctxt);
});
new Button(specialselement, 'solve', '', () => {
    cube.solve();
    cube.draw(ctxt);
});
new Button(buttonselement, 'F', '', () => {
    cube.F(false);
    cube.draw(ctxt);
});
new Button(buttonselement, 'B', '', () => {
    cube.B(false);
    cube.draw(ctxt);
});
new Button(buttonselement, 'L', '', () => {
    cube.L(false);
    cube.draw(ctxt);
});
new Button(buttonselement, 'R', '', () => {
    cube.R(false);
    cube.draw(ctxt);
});
new Button(buttonselement, 'U', '', () => {
    cube.U(false);
    cube.draw(ctxt);
});
new Button(buttonselement, 'D', '', () => {
    cube.D(false);
    cube.draw(ctxt);
});
new Button(buttonsReelement, 'F`', '', () => {
    cube.F(true);
    cube.draw(ctxt);
});
new Button(buttonsReelement, 'B`', '', () => {
    cube.B(true);
    cube.draw(ctxt);
});
new Button(buttonsReelement, 'L`', '', () => {
    cube.L(true);
    cube.draw(ctxt);
});
new Button(buttonsReelement, 'R`', '', () => {
    cube.R(true);
    cube.draw(ctxt);
});
new Button(buttonsReelement, 'U`', '', () => {
    cube.U(true);
    cube.draw(ctxt);
});
new Button(buttonsReelement, 'D`', '', () => {
    cube.D(true);
    cube.draw(ctxt);
});
//# sourceMappingURL=data:application/json;base64,