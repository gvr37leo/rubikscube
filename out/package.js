class Vector {
    constructor(size) {
        this.vals = new Array(size);
    }
    add(v) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] += v.vals[i];
        }
        return this;
    }
    sub(v) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] += v.vals[i];
        }
        return this;
    }
    scale(s) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] *= s;
        }
        return this;
    }
    rot(t) {
        var cost = Math.cos(t);
        var sint = Math.sin(t);
        var x = this.x * cost - this.y * sint;
        var y = this.x * sint + this.y * cost;
        this.x = x;
        this.y = y;
        return this;
    }
    round() {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] = Math.round(this.vals[i]);
        }
        return this;
    }
    length() {
        var sum = 0;
        for (var i = 0; i < this.vals.length; i++) {
            sum += Math.pow(this.vals[i], 2);
        }
        return Math.sqrt(sum);
    }
    normalize() {
        return this.scale(1 / this.length());
    }
    to(v) {
        return v.c().sub(this);
    }
    lerp(v, weight) {
        return this.c().add(this.to(v).scale(weight));
    }
    c() {
        return new Vector(this.vals.length).overwrite(this);
    }
    equals(other) {
        for (var i = 0; i < this.vals.length; i++) {
            if (this.vals[i] != other.vals[i]) {
                return false;
            }
        }
        return true;
    }
    overwrite(v) {
        for (var i = 0; i < this.vals.length; i++) {
            this.vals[i] = v.vals[i];
        }
        return this;
    }
    dot(v) {
        var sum = 0;
        for (var i = 0; i < this.vals.length; i++) {
            sum += this.vals[i] * v.vals[i];
        }
        return sum;
    }
    loop() {
    }
    incr() {
    }
    project(v) {
        return v.c().scale(this.dot(v) / v.dot(v));
    }
    get(i) {
        return this.vals[i];
    }
    set(i, val) {
        this.vals[i] = val;
    }
    get x() {
        return this.vals[0];
    }
    get y() {
        return this.vals[1];
    }
    get z() {
        return this.vals[2];
    }
    set x(val) {
        this.vals[0] = val;
    }
    set y(val) {
        this.vals[1] = val;
    }
    set z(val) {
        this.vals[2] = val;
    }
}
class Vector2 extends Vector {
    constructor(x, y) {
        super(2);
        this.x = x;
        this.y = y;
    }
}
class Vector3 extends Vector {
    constructor(x, y, z) {
        super(3);
        this.x = x;
        this.y = y;
        this.z = z;
    }
    cross(v) {
        var x = this.y * v.z - this.z * v.y;
        var y = this.z * v.x - this.x * v.z;
        var z = this.x * v.y - this.y * v.x;
        return new Vector3(x, y, z);
    }
    rotX(t) {
    }
    rotY(t) {
    }
    rotZ(t) {
    }
}
/// <reference path="node_modules/vectorx/vector.ts" />
class Matrix {
    constructor() {
        this.vals = [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ];
    }
    identity() {
    }
    multM(other) {
        var result = new Matrix();
        for (var row = 0; row < 4; row++) {
            for (var col = 0; col < 4; col++) {
                var sum = 0;
                for (var k = 0; k < 4; k++) {
                    sum += this.vals[row][k] * other.vals[k][col];
                }
                result.vals[row][col] = sum;
            }
        }
        return result;
    }
    multV(other) {
        var p = new Vector3(0, 0, 0);
        for (var row = 0; row < 4; row++) {
            for (var k = 0; k < 3; k++) {
                p.set(row, p.get(row) + this.vals[row][k] * other.get(k));
            }
            p.set(row, p.get(row) + this.vals[row][3]);
        }
        other.overwrite(p);
        return this;
    }
    static rotate(u, rotation) {
        var cost = Math.cos(rotation);
        var sint = Math.sin(rotation);
        var icost = 1 - cost;
        var matrix = [
            [cost + Math.pow(u.x, 2) * icost, u.x * u.y * icost - u.z * sint, u.x * u.z * icost + u.y * sint, 0],
            [u.y * u.x * icost + u.z * sint, cost + Math.pow(u.y, 2) * icost, u.y * u.z * icost - u.x * sint, 0],
            [u.z * u.x * icost - u.y * sint, u.z * u.y * icost + u.x * sint, cost + Math.pow(u.z, 2) * icost, 0],
            [0, 0, 0, 1]
        ];
        var newmatrix = new Matrix();
        newmatrix.vals = matrix;
        return newmatrix;
    }
}
/// <reference path="vector.ts" />
/// <reference path="node_modules/matrix2x/matrix.ts" />
var Color;
(function (Color) {
    Color[Color["green"] = 0] = "green";
    Color[Color["blue"] = 1] = "blue";
    Color[Color["orange"] = 2] = "orange";
    Color[Color["red"] = 3] = "red";
    Color[Color["white"] = 4] = "white";
    Color[Color["yellow"] = 5] = "yellow";
})(Color || (Color = {}));
var Side;
(function (Side) {
    Side[Side["F"] = 0] = "F";
    Side[Side["B"] = 1] = "B";
    Side[Side["L"] = 2] = "L";
    Side[Side["R"] = 3] = "R";
    Side[Side["U"] = 4] = "U";
    Side[Side["D"] = 5] = "D";
})(Side || (Side = {}));
var side2NormalMap = new Map();
side2NormalMap.set(Side.F, new Vector3(0, 0, -1));
side2NormalMap.set(Side.B, new Vector3(0, 0, 1));
side2NormalMap.set(Side.L, new Vector3(-1, 0, 0));
side2NormalMap.set(Side.R, new Vector3(1, 0, 0));
side2NormalMap.set(Side.U, new Vector3(0, 1, 0));
side2NormalMap.set(Side.D, new Vector3(0, -1, 0));
class Face {
    constructor(color, normal) {
        this.color = color;
        this.normal = normal;
    }
}
class Block {
    constructor(pos, faces) {
        this.pos = pos;
        this.faces = faces;
    }
    faceFromNormal(normal) {
        for (var face of this.faces) {
            if (face.normal.equals(normal)) {
                return face;
            }
        }
        return null;
    }
    isEdge() {
        return this.faces.length == 2;
    }
    isSameBlock(other) {
    }
    isSameBlockAndSameOrientation() {
    }
}
class Cube2 {
    constructor() {
        this.blocks = [];
        for (var x = -1; x <= 1; x++) {
            for (var y = -1; y <= 1; y++) {
                for (var z = -1; z <= 1; z++) {
                    var v = new Vector3(x, y, z);
                    var faces = [];
                    if (v.x == 1) {
                        faces.push(new Face(Color.red, new Vector3(1, 0, 0)));
                    }
                    else if (v.x == -1) {
                        faces.push(new Face(Color.orange, new Vector3(-1, 0, 0)));
                    }
                    if (v.y == 1) {
                        faces.push(new Face(Color.white, new Vector3(0, 1, 0)));
                    }
                    else if (v.y == -1) {
                        faces.push(new Face(Color.yellow, new Vector3(0, -1, 0)));
                    }
                    if (v.z == 1) {
                        faces.push(new Face(Color.blue, new Vector3(0, 0, 1)));
                    }
                    else if (v.z == -1) {
                        faces.push(new Face(Color.green, new Vector3(0, 0, -1)));
                    }
                    this.blocks.push(new Block(v, faces));
                }
            }
        }
    }
    rotate(side, counterclockwise) {
        var normal = side2NormalMap.get(side);
        var rot = Math.PI / 2;
        if (counterclockwise) {
            rot = -rot;
        }
        var rotMatrix = Matrix.rotate(normal, rot);
    }
    getSideBlocks(side) {
        var normal = side2NormalMap.get(side);
        var sideblocks = [];
        for (var block of this.blocks) {
            if (block.pos.dot(normal) > 0.1) {
                sideblocks.push(block);
            }
        }
        return sideblocks;
    }
    getSideColors(side) {
        var normal = side2NormalMap.get(side);
        var colors = [
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ];
        var blocks = this.getSideBlocks(side);
        for (var block of blocks) {
            var face = block.faceFromNormal(normal);
            colors[-block.pos.y + 1][block.pos.x + 1] = face.color;
        }
        return colors;
    }
    draw(ctxt) {
        var locs = [
            new Vector2(150, 150),
            new Vector2(450, 150),
            new Vector2(0, 150),
            new Vector2(300, 150),
            new Vector2(150, 0),
            new Vector2(150, 300),
        ];
        cube.drawSide(ctxt, new Vector2(0, 0), Side.F);
        // for(var i = 0; i < 6; i++){
        //     this.drawSide(ctxt,locs[i],i)
        // }
    }
    drawSide(ctxt, v, side) {
        var size = 50;
        var colors = this.getSideColors(side);
        for (var x = 0; x < 3; x++) {
            for (var y = 0; y < 3; y++) {
                ctxt.fillStyle = Color[colors[y][x]];
                ctxt.fillRect(x * size + v.x, y * size + v.y, size, size);
            }
        }
    }
}
function map(val1, start1, stop1, start2, stop2) {
    return start2 + (stop2 - start2) * ((val1 - start1) / (stop1 - start1));
}
function inRange(min, max, value) {
    if (min > max) {
        var temp = min;
        min = max;
        max = temp;
    }
    return value <= max && value >= min;
}
function min(a, b) {
    if (a < b)
        return a;
    return b;
}
function max(a, b) {
    if (a > b)
        return a;
    return b;
}
function clamp(val, min, max) {
    return max(min(val, max), min);
}
function rangeContain(a1, a2, b1, b2) {
    return max(a1, a2) >= max(b1, b2) && min(a1, a2) <= max(b1, b2);
}
function create2dArray(v, fill) {
    var rows = new Array(v.x);
    for (var i = 0; i < v.x; i++) {
        rows[i] = new Array(v.y);
        for (var j = 0; j < v.y; j++) {
            rows[i][j] = fill;
        }
    }
    return rows;
}
function getMousePos(canvas, evt) {
    var rect = canvas.getBoundingClientRect();
    return new Vector2(evt.clientX - rect.left, evt.clientY - rect.top);
}
function createCanvas(x, y) {
    var canvas = document.createElement('canvas');
    canvas.width = x;
    canvas.height = y;
    document.body.appendChild(canvas);
    var ctxt = canvas.getContext('2d');
    return { ctxt: ctxt, canvas: canvas };
}
function random(min, max) {
    return Math.random() * (max - min) + min;
}
function randomSpread(center, spread) {
    var half = spread / 2;
    return random(center - half, center + half);
}
var lastUpdate = Date.now();
function loop(callback) {
    var now = Date.now();
    callback(now - lastUpdate);
    lastUpdate = now;
    requestAnimationFrame(() => {
        loop(callback);
    });
}
function mod(number, modulus) {
    return ((number % modulus) + modulus) % modulus;
}
function* iter(n) {
    var i = 0;
    while (i < n)
        yield i++;
}
var keys = {};
document.addEventListener('keydown', (e) => {
    keys[e.keyCode] = true;
});
document.addEventListener('keyup', (e) => {
    keys[e.keyCode] = false;
});
function getMoveInput() {
    var dir = new Vector2(0, 0);
    if (keys[37] || keys[65])
        dir.x--; //left
    if (keys[38] || keys[87])
        dir.y++; //up
    if (keys[39] || keys[68])
        dir.x++; //right
    if (keys[40] || keys[83])
        dir.y--; //down
    return dir;
}
function getFiles(strings) {
    var promises = [];
    for (var string of strings) {
        var promise = fetch(string)
            .then(resp => resp.text())
            .then(text => text);
        promises.push(promise);
    }
    return Promise.all(promises);
}
class DuplexMap {
    constructor() {
        this.map = new Map();
        this.reverseMap = new Map();
    }
    get(key) {
        return this.map.get(key);
    }
    set(key, val) {
        this.map.set(key, val);
        this.reverseMap.set(val, key);
    }
    rget(val) {
        return this.reverseMap.get(val);
    }
}
class Button {
    constructor(element, html, classes, callback) {
        this.callback = callback;
        this.btnElement = string2html(`<button class="${classes}">${html}</button>`);
        element.appendChild(this.btnElement);
        this.btnElement.addEventListener('click', () => {
            this.callback();
        });
    }
}
function string2html(string) {
    var div = document.createElement('div');
    div.innerHTML = string;
    return div.children[0];
}
/// <reference path="cube2.ts" />
/// <reference path="utils.ts" />
/// <reference path="buttons.ts" />
var canctx = createCanvas(600, 450);
var canvas = canctx.canvas;
var ctxt = canctx.ctxt;
canvas.style.backgroundColor = 'grey';
var canvaselement = document.querySelector('#canvas');
var buttonselement = document.querySelector('#buttons');
var buttonsReelement = document.querySelector('#buttonsRe');
var specialselement = document.querySelector('#specials');
canvaselement.appendChild(canvas);
var cube = new Cube2();
cube.draw(ctxt);
// cube.rotate()
// new Button(specialselement,'scramble','',() => {
//     cube.scramble(50)
//     cube.draw(ctxt)
// })
// new Button(specialselement,'solve','',() => {
//     cube.solve()
//     cube.draw(ctxt)
// })
// new Button(buttonselement,'F','',() => {
//     cube.F(false)
//     cube.draw(ctxt)
// })
// new Button(buttonselement,'B','',() => {
//     cube.B(false)
//     cube.draw(ctxt)
// })
// new Button(buttonselement,'L','',() => {
//     cube.L(false)
//     cube.draw(ctxt)
// })
// new Button(buttonselement,'R','',() => {
//     cube.R(false)
//     cube.draw(ctxt)
// })
// new Button(buttonselement,'U','',() => {
//     cube.U(false)
//     cube.draw(ctxt)
// })
// new Button(buttonselement,'D','',() => {
//     cube.D(false)
//     cube.draw(ctxt)
// })
// new Button(buttonsReelement,'F`','',() => {
//     cube.F(true)
//     cube.draw(ctxt)
// })
// new Button(buttonsReelement,'B`','',() => {
//     cube.B(true)
//     cube.draw(ctxt)
// })
// new Button(buttonsReelement,'L`','',() => {
//     cube.L(true)
//     cube.draw(ctxt)
// })
// new Button(buttonsReelement,'R`','',() => {
//     cube.R(true)
//     cube.draw(ctxt)
// })
// new Button(buttonsReelement,'U`','',() => {
//     cube.U(true)
//     cube.draw(ctxt)
// })
// new Button(buttonsReelement,'D`','',() => {
//     cube.D(true)
//     cube.draw(ctxt)
// })
//# sourceMappingURL=data:application/json;base64,